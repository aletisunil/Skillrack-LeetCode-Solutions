A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

 

Example 1:

Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
 

Note:

S will have length in range [1, 500].
S will consist of lowercase English letters ('a' to 'z') only.


class Solution:
    def partitionLabels(self, S: str) -> List[int]:
        d={char: index for index,char in enumerate(S)}
        l=0
        r=0
        res=[]
        for index,char in enumerate(S):
            r=max(r,d[char])
            if r==index:
                res.append(r-l+1)
                l=index+1
        return res
