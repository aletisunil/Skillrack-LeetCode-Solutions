Design an Iterator class, which has:

A constructor that takes a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments.
A function next() that returns the next combination of length combinationLength in lexicographical order.
A function hasNext() that returns True if and only if there exists a next combination.
 

Example:

CombinationIterator iterator = new CombinationIterator("abc", 2); // creates the iterator.

iterator.next(); // returns "ab"
iterator.hasNext(); // returns true
iterator.next(); // returns "ac"
iterator.hasNext(); // returns true
iterator.next(); // returns "bc"
iterator.hasNext(); // returns false

from itertools import combinations
class CombinationIterator:

    def __init__(self, characters: str, combinationLength: int):
        self.output=combinations(characters,combinationLength)
        self.output=["".join(i) for i in self.output]
        self.count=-1

    def next(self) -> str:
        if self.hasNext:
            self.count+=1
            return self.output[self.count]
            
        

    def hasNext(self) -> bool:
        return self.count+1 < len(self.output)
        


# Your CombinationIterator object will be instantiated and called as such:
# obj = CombinationIterator(characters, combinationLength)
# param_1 = obj.next()
# param_2 = obj.hasNext()
